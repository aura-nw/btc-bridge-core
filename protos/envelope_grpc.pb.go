// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: protos/envelope.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnvelopeService_VerifyBitcoinDeposits_FullMethodName    = "/envelope.EnvelopeService/VerifyBitcoinDeposits"
	EnvelopeService_VerifyTokenDeposits_FullMethodName      = "/envelope.EnvelopeService/VerifyTokenDeposits"
	EnvelopeService_VerifyBitcoinWithdrawals_FullMethodName = "/envelope.EnvelopeService/VerifyBitcoinWithdrawals"
	EnvelopeService_VerifyTokenWithdrawals_FullMethodName   = "/envelope.EnvelopeService/VerifyTokenWithdrawals"
)

// EnvelopeServiceClient is the client API for EnvelopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvelopeServiceClient interface {
	// Verify deposit side
	VerifyBitcoinDeposits(ctx context.Context, in *VerifyBitcoinDepositsRequest, opts ...grpc.CallOption) (*VerifyBitcoinDepositsResponse, error)
	VerifyTokenDeposits(ctx context.Context, in *VerifyTokenDepositsRequest, opts ...grpc.CallOption) (*VerifyTokenDepositsResponse, error)
	// Verify withdrawal side
	VerifyBitcoinWithdrawals(ctx context.Context, in *VerifyBitcoinWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyBitcoinWithdrawalsResponse, error)
	VerifyTokenWithdrawals(ctx context.Context, in *VerifyTokenWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyTokenWithdrawalsResponse, error)
}

type envelopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvelopeServiceClient(cc grpc.ClientConnInterface) EnvelopeServiceClient {
	return &envelopeServiceClient{cc}
}

func (c *envelopeServiceClient) VerifyBitcoinDeposits(ctx context.Context, in *VerifyBitcoinDepositsRequest, opts ...grpc.CallOption) (*VerifyBitcoinDepositsResponse, error) {
	out := new(VerifyBitcoinDepositsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyBitcoinDeposits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envelopeServiceClient) VerifyTokenDeposits(ctx context.Context, in *VerifyTokenDepositsRequest, opts ...grpc.CallOption) (*VerifyTokenDepositsResponse, error) {
	out := new(VerifyTokenDepositsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyTokenDeposits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envelopeServiceClient) VerifyBitcoinWithdrawals(ctx context.Context, in *VerifyBitcoinWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyBitcoinWithdrawalsResponse, error) {
	out := new(VerifyBitcoinWithdrawalsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyBitcoinWithdrawals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envelopeServiceClient) VerifyTokenWithdrawals(ctx context.Context, in *VerifyTokenWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyTokenWithdrawalsResponse, error) {
	out := new(VerifyTokenWithdrawalsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyTokenWithdrawals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvelopeServiceServer is the server API for EnvelopeService service.
// All implementations must embed UnimplementedEnvelopeServiceServer
// for forward compatibility
type EnvelopeServiceServer interface {
	// Verify deposit side
	VerifyBitcoinDeposits(context.Context, *VerifyBitcoinDepositsRequest) (*VerifyBitcoinDepositsResponse, error)
	VerifyTokenDeposits(context.Context, *VerifyTokenDepositsRequest) (*VerifyTokenDepositsResponse, error)
	// Verify withdrawal side
	VerifyBitcoinWithdrawals(context.Context, *VerifyBitcoinWithdrawalsRequest) (*VerifyBitcoinWithdrawalsResponse, error)
	VerifyTokenWithdrawals(context.Context, *VerifyTokenWithdrawalsRequest) (*VerifyTokenWithdrawalsResponse, error)
	mustEmbedUnimplementedEnvelopeServiceServer()
}

// UnimplementedEnvelopeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnvelopeServiceServer struct {
}

func (UnimplementedEnvelopeServiceServer) VerifyBitcoinDeposits(context.Context, *VerifyBitcoinDepositsRequest) (*VerifyBitcoinDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBitcoinDeposits not implemented")
}
func (UnimplementedEnvelopeServiceServer) VerifyTokenDeposits(context.Context, *VerifyTokenDepositsRequest) (*VerifyTokenDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenDeposits not implemented")
}
func (UnimplementedEnvelopeServiceServer) VerifyBitcoinWithdrawals(context.Context, *VerifyBitcoinWithdrawalsRequest) (*VerifyBitcoinWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBitcoinWithdrawals not implemented")
}
func (UnimplementedEnvelopeServiceServer) VerifyTokenWithdrawals(context.Context, *VerifyTokenWithdrawalsRequest) (*VerifyTokenWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenWithdrawals not implemented")
}
func (UnimplementedEnvelopeServiceServer) mustEmbedUnimplementedEnvelopeServiceServer() {}

// UnsafeEnvelopeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvelopeServiceServer will
// result in compilation errors.
type UnsafeEnvelopeServiceServer interface {
	mustEmbedUnimplementedEnvelopeServiceServer()
}

func RegisterEnvelopeServiceServer(s grpc.ServiceRegistrar, srv EnvelopeServiceServer) {
	s.RegisterService(&EnvelopeService_ServiceDesc, srv)
}

func _EnvelopeService_VerifyBitcoinDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBitcoinDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyBitcoinDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyBitcoinDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyBitcoinDeposits(ctx, req.(*VerifyBitcoinDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvelopeService_VerifyTokenDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyTokenDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyTokenDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyTokenDeposits(ctx, req.(*VerifyTokenDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvelopeService_VerifyBitcoinWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBitcoinWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyBitcoinWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyBitcoinWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyBitcoinWithdrawals(ctx, req.(*VerifyBitcoinWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvelopeService_VerifyTokenWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyTokenWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyTokenWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyTokenWithdrawals(ctx, req.(*VerifyTokenWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvelopeService_ServiceDesc is the grpc.ServiceDesc for EnvelopeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvelopeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envelope.EnvelopeService",
	HandlerType: (*EnvelopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyBitcoinDeposits",
			Handler:    _EnvelopeService_VerifyBitcoinDeposits_Handler,
		},
		{
			MethodName: "VerifyTokenDeposits",
			Handler:    _EnvelopeService_VerifyTokenDeposits_Handler,
		},
		{
			MethodName: "VerifyBitcoinWithdrawals",
			Handler:    _EnvelopeService_VerifyBitcoinWithdrawals_Handler,
		},
		{
			MethodName: "VerifyTokenWithdrawals",
			Handler:    _EnvelopeService_VerifyTokenWithdrawals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/envelope.proto",
}
