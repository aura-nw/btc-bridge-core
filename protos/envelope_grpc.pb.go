// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: protos/envelope.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnvelopeService_VerifyBtcDeposits_FullMethodName            = "/envelope.EnvelopeService/VerifyBtcDeposits"
	EnvelopeService_VerifyInscriptionDeposits_FullMethodName    = "/envelope.EnvelopeService/VerifyInscriptionDeposits"
	EnvelopeService_VerifyBtcWithdrawals_FullMethodName         = "/envelope.EnvelopeService/VerifyBtcWithdrawals"
	EnvelopeService_VerifyInscriptionWithdrawals_FullMethodName = "/envelope.EnvelopeService/VerifyInscriptionWithdrawals"
)

// EnvelopeServiceClient is the client API for EnvelopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvelopeServiceClient interface {
	// Verify deposit side
	VerifyBtcDeposits(ctx context.Context, in *VerifyBtcDepositsRequest, opts ...grpc.CallOption) (*VerifyBtcDepositsResponse, error)
	VerifyInscriptionDeposits(ctx context.Context, in *VerifyInscriptionDepositsRequest, opts ...grpc.CallOption) (*VerifyInscriptionDepositsResponse, error)
	// Verify withdrawal side
	VerifyBtcWithdrawals(ctx context.Context, in *VerifyBtcWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyBtcWithdrawalsResponse, error)
	VerifyInscriptionWithdrawals(ctx context.Context, in *VerifyInscriptionWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyInscriptionWithdrawalsResponse, error)
}

type envelopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvelopeServiceClient(cc grpc.ClientConnInterface) EnvelopeServiceClient {
	return &envelopeServiceClient{cc}
}

func (c *envelopeServiceClient) VerifyBtcDeposits(ctx context.Context, in *VerifyBtcDepositsRequest, opts ...grpc.CallOption) (*VerifyBtcDepositsResponse, error) {
	out := new(VerifyBtcDepositsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyBtcDeposits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envelopeServiceClient) VerifyInscriptionDeposits(ctx context.Context, in *VerifyInscriptionDepositsRequest, opts ...grpc.CallOption) (*VerifyInscriptionDepositsResponse, error) {
	out := new(VerifyInscriptionDepositsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyInscriptionDeposits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envelopeServiceClient) VerifyBtcWithdrawals(ctx context.Context, in *VerifyBtcWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyBtcWithdrawalsResponse, error) {
	out := new(VerifyBtcWithdrawalsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyBtcWithdrawals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envelopeServiceClient) VerifyInscriptionWithdrawals(ctx context.Context, in *VerifyInscriptionWithdrawalsRequest, opts ...grpc.CallOption) (*VerifyInscriptionWithdrawalsResponse, error) {
	out := new(VerifyInscriptionWithdrawalsResponse)
	err := c.cc.Invoke(ctx, EnvelopeService_VerifyInscriptionWithdrawals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvelopeServiceServer is the server API for EnvelopeService service.
// All implementations must embed UnimplementedEnvelopeServiceServer
// for forward compatibility
type EnvelopeServiceServer interface {
	// Verify deposit side
	VerifyBtcDeposits(context.Context, *VerifyBtcDepositsRequest) (*VerifyBtcDepositsResponse, error)
	VerifyInscriptionDeposits(context.Context, *VerifyInscriptionDepositsRequest) (*VerifyInscriptionDepositsResponse, error)
	// Verify withdrawal side
	VerifyBtcWithdrawals(context.Context, *VerifyBtcWithdrawalsRequest) (*VerifyBtcWithdrawalsResponse, error)
	VerifyInscriptionWithdrawals(context.Context, *VerifyInscriptionWithdrawalsRequest) (*VerifyInscriptionWithdrawalsResponse, error)
	mustEmbedUnimplementedEnvelopeServiceServer()
}

// UnimplementedEnvelopeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnvelopeServiceServer struct {
}

func (UnimplementedEnvelopeServiceServer) VerifyBtcDeposits(context.Context, *VerifyBtcDepositsRequest) (*VerifyBtcDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBtcDeposits not implemented")
}
func (UnimplementedEnvelopeServiceServer) VerifyInscriptionDeposits(context.Context, *VerifyInscriptionDepositsRequest) (*VerifyInscriptionDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyInscriptionDeposits not implemented")
}
func (UnimplementedEnvelopeServiceServer) VerifyBtcWithdrawals(context.Context, *VerifyBtcWithdrawalsRequest) (*VerifyBtcWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBtcWithdrawals not implemented")
}
func (UnimplementedEnvelopeServiceServer) VerifyInscriptionWithdrawals(context.Context, *VerifyInscriptionWithdrawalsRequest) (*VerifyInscriptionWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyInscriptionWithdrawals not implemented")
}
func (UnimplementedEnvelopeServiceServer) mustEmbedUnimplementedEnvelopeServiceServer() {}

// UnsafeEnvelopeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvelopeServiceServer will
// result in compilation errors.
type UnsafeEnvelopeServiceServer interface {
	mustEmbedUnimplementedEnvelopeServiceServer()
}

func RegisterEnvelopeServiceServer(s grpc.ServiceRegistrar, srv EnvelopeServiceServer) {
	s.RegisterService(&EnvelopeService_ServiceDesc, srv)
}

func _EnvelopeService_VerifyBtcDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBtcDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyBtcDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyBtcDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyBtcDeposits(ctx, req.(*VerifyBtcDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvelopeService_VerifyInscriptionDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyInscriptionDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyInscriptionDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyInscriptionDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyInscriptionDeposits(ctx, req.(*VerifyInscriptionDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvelopeService_VerifyBtcWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBtcWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyBtcWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyBtcWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyBtcWithdrawals(ctx, req.(*VerifyBtcWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvelopeService_VerifyInscriptionWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyInscriptionWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvelopeServiceServer).VerifyInscriptionWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvelopeService_VerifyInscriptionWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvelopeServiceServer).VerifyInscriptionWithdrawals(ctx, req.(*VerifyInscriptionWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvelopeService_ServiceDesc is the grpc.ServiceDesc for EnvelopeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvelopeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envelope.EnvelopeService",
	HandlerType: (*EnvelopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyBtcDeposits",
			Handler:    _EnvelopeService_VerifyBtcDeposits_Handler,
		},
		{
			MethodName: "VerifyInscriptionDeposits",
			Handler:    _EnvelopeService_VerifyInscriptionDeposits_Handler,
		},
		{
			MethodName: "VerifyBtcWithdrawals",
			Handler:    _EnvelopeService_VerifyBtcWithdrawals_Handler,
		},
		{
			MethodName: "VerifyInscriptionWithdrawals",
			Handler:    _EnvelopeService_VerifyInscriptionWithdrawals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/envelope.proto",
}
